/*
 * CAN.c
 *
 *  Created on: 03.06.2021
 *      Author: maanm
 */
#include "CAN.h"

static eCAN_t eCAN_GeneralInit(void);
static eCAN_t eCAN_TxInit(void);
static eCAN_t eCAN_FilterInit(void);
static uint32_t u32CANTxBufferNumber = FDCAN_TX_BUFFER0;

eCAN_t eCAN_Start(void)
{
   if((eCAN_OKAY != eCAN_GeneralInit()) || (eCAN_OKAY != eCAN_TxInit()) || (eCAN_OKAY != eCAN_FilterInit()))
      return eCAN_ERROR;

  return eCAN_OKAY;
}


static eCAN_t eCAN_GeneralInit(void)
{
   if(HAL_OK != HAL_FDCAN_Start(&hfdcan1))
      return eCAN_ERROR;

   if(HAL_OK != HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_BUFFER_NEW_MESSAGE, u32CANTxBufferNumber))
      return eCAN_ERROR;

   return eCAN_OKAY;
}

static eCAN_t eCAN_TxInit(void)
{
   xCANTxHeader.IdType =cu32TxId;
   xCANTxHeader.Identifier = FDCAN_STANDARD_ID;
   xCANTxHeader.TxFrameType =FDCAN_DATA_BYTES_32;
   xCANTxHeader.DataLength =CAN_BUFFER_SIZE;
   xCANTxHeader.ErrorStateIndicator= FDCAN_ESI_PASSIVE;
   xCANTxHeader.BitRateSwitch=FDCAN_BRS_OFF;
   xCANTxHeader.FDFormat=FDCAN_CLASSIC_CAN;
   xCANTxHeader.TxEventFifoControl=FDCAN_STORE_TX_EVENTS;
   xCANTxHeader.MessageMarker = 0;


   return  ;
}


static eCAN_t eCAN_FilterInit(void)
{

 // TODO set CAN callculate filter

   if(HAL_OK != HAL_FDCAN_ConfigFilter(&hfdcan1, &xCANFilter))
      return eCAN_ERROR;

   return eCAN_OKAY;
}
