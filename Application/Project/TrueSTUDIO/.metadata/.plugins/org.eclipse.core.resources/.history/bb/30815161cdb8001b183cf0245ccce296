/*
 * BFFT_CAN.c
 *
 *  Created on: Apr 8, 2021
 *      Author: Nutzer
 */

#include "BFFT.h"
#include "ewrte.h"
#include "stdio.h"
#include "main.h"
#define CAN_BUFFER_SIZE 4u
#define CAN_INDEX_MESSAGE_VALID 0u
#define CAN_INDEX_MESSAGE_INVALID 1u

static FDCAN_TxHeaderTypeDef xCANTxHeader;
static FDCAN_RxHeaderTypeDef xCANRxHeader;
static FDCAN_FilterTypeDef xCANFilter;
static uint32_t u32CANTxBufferNumber;
static const uint32_t cu32TxId = 0;
static volatile uint32_t au32CANDataValidationCounters[] = {0u, 0u};
static const uint8_t cau8TxData[CAN_BUFFER_SIZE] = {0xBAu};
static uint8_t au8RxData[CAN_BUFFER_SIZE] = {0u, 0u, 0u, 0u};

static int8_t s8CANGeneralInit(void);
static int8_t s8CANTxInit(void);
static int8_t s8CANFilterInit(void);
static void vCANSetStatusLED(const int8_t cs8CANStatus);


int8_t s8CANInit(void)
{
   int8_t s8ErrorHandle = CAN_OKAY;

   if(CAN_ERROR == s8CANGeneralInit())
   {
      s8ErrorHandle = CAN_ERROR;
   }

   if(CAN_ERROR == s8CANTxInit())
   {
      s8ErrorHandle = CAN_ERROR;
   }

   if(CAN_ERROR == s8CANFilterInit())
   {
      s8ErrorHandle = CAN_ERROR;
   }

  // vCANSetStatusLED(s8ErrorHandle);

   return s8ErrorHandle;
}


int8_t s8CANSendMessage(void)
{
   int8_t s8ErrorHandle = CAN_OKAY;

   if(HAL_OK != HAL_FDCAN_AddMessageToTxBuffer(&hfdcan1, &xCANTxHeader, (uint8_t*) cau8TxData, u32CANTxBufferNumber))
   {
      s8ErrorHandle = CAN_ERROR;

   }
   vCANSetStatusLED(LED_TEST_Pin);

   return s8ErrorHandle;
}


int8_t s8CANReceiveMessage(uint8_t* const pu8Data)
{
   int8_t s8ErrorHandle = CAN_OKAY;
   uint8_t* pu8ReceiveBuffer = au8RxData;

   if(NULL != pu8Data)
   {
      pu8ReceiveBuffer = pu8Data;
   }

   if(HAL_OK != HAL_FDCAN_GetRxMessage(&hfdcan1, (uint32_t)pu8ReceiveBuffer , &xCANRxHeader,(uint8_t*)au8RxData ))
   {
      s8ErrorHandle = CAN_ERROR;
   }
   else
   {
      if(0u == memcmp(cau8TxData, pu8ReceiveBuffer, CAN_BUFFER_SIZE))
      {
         au32CANDataValidationCounters[CAN_INDEX_MESSAGE_VALID]++;
      }
      else
      {
         au32CANDataValidationCounters[CAN_INDEX_MESSAGE_INVALID]++;
         s8ErrorHandle = CAN_ERROR;
      }

      memset(au8RxData, 0u, CAN_BUFFER_SIZE);
   }

   vCANSetStatusLED(s8ErrorHandle);

   return s8ErrorHandle;
}


static int8_t s8CANGeneralInit(void)
{
   int8_t s8ErrorHandle = CAN_OKAY;

   if(HAL_OK != HAL_FDCAN_Start(&hfdcan1))
   {
      s8ErrorHandle = CAN_ERROR;
   }

   if(HAL_OK != HAL_FDCAN_ActivateNotification(&hfdcan1,0,0))
   {
      s8ErrorHandle = CAN_ERROR;
   }

   return s8ErrorHandle;
}

static int8_t s8CANTxInit(void)
{
   xCANTxHeader.IdType =cu32TxId;
   xCANTxHeader.Identifier = FDCAN_STANDARD_ID;
   xCANTxHeader.TxFrameType =FDCAN_DATA_FRAME;
   xCANTxHeader.DataLength =CAN_BUFFER_SIZE;
   xCANTxHeader.ErrorStateIndicator= FDCAN_ESI_ACTIVE;
   xCANTxHeader.BitRateSwitch=FDCAN_BRS_OFF;
   xCANTxHeader.FDFormat=FDCAN_CLASSIC_CAN;
   xCANTxHeader.TxEventFifoControl=FDCAN_STORE_TX_EVENTS;
   xCANTxHeader.MessageMarker = 0;


   return CAN_OKAY;
}


static int8_t s8CANFilterInit(void)
{
   int8_t s8ErrorHandle = CAN_OKAY;

   xCANFilter.FilterType = FDCAN_FILTER_TO_RXBUFFER ;
   xCANFilter.FilterIndex = 1u<<5u;//cu32TxId << 5u;
   xCANFilter.FilterConfig=FDCAN_FILTER_TO_RXFIFO0;


   if(HAL_OK != HAL_FDCAN_ConfigFilter(&hfdcan1, &xCANFilter))
   {
      s8ErrorHandle = CAN_ERROR;
   }

   return s8ErrorHandle;
}


static void vCANSetStatusLED(const int8_t cs8CANStatus)
{
   (CAN_OKAY == cs8CANStatus) ? vLEDStatusOkaySet() : vLEDStatusErrorSet();
}
